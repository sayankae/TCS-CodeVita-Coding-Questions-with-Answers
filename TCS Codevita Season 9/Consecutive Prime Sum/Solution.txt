#my approach
#First I used Sieve method to find prime upto N 
#Then I used the list of prime and pushed one element at a time in loop to sum them up
#At each stage of loop I checked whether the sum present in list of prime or not
#If it returns True then I incremented my Count value and after the loo[ finished I just printed the answer
#####NOTE#####
#1. Some Edge case i did not checked is that whether the number is below 1 or equal to 1
#2. Whether the maximum value of n is executable or not
#3. Algorithm will take a lot of Auxilary space for computation i.e upto N
#4. Time Complexity is roughly O(sqrt(N))

import math

def Sieve(n):
    pseudo_list = [True]*(n+1)
    i = 2
    prime = []
    while i<math.floor(math.sqrt(n)):
        j = i*i
        while j<=n:
            pseudo_list[j] = False
            j = j+i
        i = i+1

    for i in range(2,n+1):
        if pseudo_list[i] == True:
            prime.append(i)
    return prime
    
def check(prime,num):
    if sum in prime:
        return True
    else:
        return False
    
if __name__ =="__main__":
    n = int(input())
    prime = Sieve(n)
    count = 0
    sum = 2

    for i in range(1,len(prime)):
        sum = sum + prime[i]
        if check(prime,sum) == True:
            count = count+1
    print(count)
    
else:
    print("error")